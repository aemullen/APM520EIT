%% Forward problem using sigmas = 1
clear all; close all; clc;
% Calculating Sigma
N = 4;
x = 1:N+1;
y = 1:N+1;
[X,Y]= meshgrid(x,y);

%True solution of sigma
sigma = ((cos(X)) + sin(Y)).^2;

% R=N-1;
% M=ones(R,R);
% d=ones(1,R)*-4;
% d2=ones(1,R-1);
% d3=ones(1,R^2-3);
% a=diag(d)+diag(d2,1)+diag(d2,-1);
% ACell = repmat({a}, 1, R);
% A = blkdiag(ACell{:})+diag(d3,3)+diag(d3,-3);

b1 = abs(normrnd(1,0.5, N-2,1));
b2 = abs(normrnd(1,0.5, 1,N-2));
b3 = abs(normrnd(1,0.5, 1, N-2));
b4 = abs(normrnd(1,0.5, N-2,1));
% b1 = ones(N-2,1);
% b2 = zeros(1,N-2);
% b3 = ones(1,N-2);
% b4 = zeros(N-2,1);

%True solution of u
u = laplace1(N,sigma,b1,b2,b3,b4);

%Backward problem using Gauss Newton Method

%Initial guess for sigma
sigma0 = 2*ones(N+1);


 u_sol = laplace1(N,sigma0,b1,b2,b3,b4);
 r = abs(u_sol - u);


% Jacobian for 3x3

% J =[-4*u_sol(1)+u_sol(2)+u_sol(4),-u_sol(1)+u_sol(2),0,-u_sol(1)+u_sol(4),0,0,0,0,0;
%     u_sol(1),-4*u_sol(2)+u_sol(1)+u_sol(3) + u_sol(5),-u_sol(2)+u_sol(3),0,-u_sol(2)+u_sol(4),0,0,0,0;
%     0,u_sol(2)-u_sol(3),-4*u_sol(3)+u_sol(2)+u_sol(6),0,0,-u_sol(3)+u_sol(6),0,0,0;
%     u_sol(1)-u_sol(4),0,0,-4*u_sol(4)+u_sol(1)+u_sol(5)+u_sol(7),-u_sol(4)+u_sol(5),0,-u_sol(4)+u_sol(7),0,0;
%     0,u_sol(2)-u_sol(5),0,u_sol(4)-u_sol(5),-4*u_sol(5)+u_sol(2)+u_sol(4)+u_sol(6)+u_sol(8),-u_sol(5)+u_sol(6),0,-u_sol(5)+u_sol(8),0;
%     0,0,u_sol(3)-u_sol(6),0,u_sol(5)-u_sol(6),-4*u_sol(6)+u_sol(3)+u_sol(5),0,0,-u_sol(6)+u_sol(9);
%     0,0,0,u_sol(4)-u_sol(7),0,0,-4*u_sol(7)+u_sol(4)+u_sol(8),-u_sol(7)+u_sol(8),0;
%     0,0,0,0,u_sol(5)-u_sol(8),0,u_sol(7)-u_sol(8),-4*u_sol(8)+u_sol(5)+u_sol(7)+u_sol(9),-u_sol(8)+u_sol(9);
%     0,0,0,0,0,u_sol(6)-u_sol(9),0,u_sol(8)-u_sol(9),-4*u_sol(9)+u_sol(6)+u_sol(8)
%     ]
% J
    
  
sigma1 = reshape(sigma0(2:N,2:N),(N-1)*(N-1),1);




% J = zeros(R*R);
% for i = 1:R*R
%     J(:,i)=u_sol(i)*sigma0*A(:,i);
% end
%sigma = sigma1 + (J'*J)\ (J'*r);
% sigma = sigma0 + (J'*J)^-1*(J'*r);
 tol = 1e-20;
 it = 0;

 while r >tol
    u_sol = laplace1(N,sigma0,b1,b2,b3,b4);
    r = abs(u_sol - u);
%     ut = u_sol;
%     u_sol = laplace1(N,sigma(1),b1,b2,b3,b4); 
%     r = abs(u_sol-ut);
J =[-4*u_sol(1)+u_sol(2)+u_sol(4),-u_sol(1)+u_sol(2),0,-u_sol(1)+u_sol(4),0,0,0,0,0;
    u_sol(1),-4*u_sol(2)+u_sol(1)+u_sol(3) + u_sol(5),-u_sol(2)+u_sol(3),0,-u_sol(2)+u_sol(4),0,0,0,0;
    0,u_sol(2)-u_sol(3),-4*u_sol(3)+u_sol(2)+u_sol(6),0,0,-u_sol(3)+u_sol(6),0,0,0;
    u_sol(1)-u_sol(4),0,0,-4*u_sol(4)+u_sol(1)+u_sol(5)+u_sol(7),-u_sol(4)+u_sol(5),0,-u_sol(4)+u_sol(7),0,0;
    0,u_sol(2)-u_sol(5),0,u_sol(4)-u_sol(5),-4*u_sol(5)+u_sol(2)+u_sol(4)+u_sol(6)+u_sol(8),-u_sol(5)+u_sol(6),0,-u_sol(5)+u_sol(8),0;
    0,0,u_sol(3)-u_sol(6),0,u_sol(5)-u_sol(6),-4*u_sol(6)+u_sol(3)+u_sol(5),0,0,-u_sol(6)+u_sol(9);
    0,0,0,u_sol(4)-u_sol(7),0,0,-4*u_sol(7)+u_sol(4)+u_sol(8),-u_sol(7)+u_sol(8),0;
    0,0,0,0,u_sol(5)-u_sol(8),0,u_sol(7)-u_sol(8),-4*u_sol(8)+u_sol(5)+u_sol(7)+u_sol(9),-u_sol(8)+u_sol(9);
    0,0,0,0,0,u_sol(6)-u_sol(9),0,u_sol(8)-u_sol(9),-4*u_sol(9)+u_sol(6)+u_sol(8)
    ];
%     for i = 1:R*R
%         J(:,i)=u_sol(i)*sigma(1)*A(:,i);
%     end
    sigma0 = reshape(sigma0(2:N,2:N),(N-1)*(N-1),1);
     sigma0 = sigma0 + (J'*J)\ (J'*r);
     sigma0 = reshape(sigma0,(N-1),(N-1));
     sigmaf=2*ones(N+1);
     sigmaf(2:N,2:N)=sigma0;
     sigma0 = sigmaf
     %sigma = sigma + J\r;
     it = it+1;
     if it ==1000
         break
     end
end 
if it==0
disp('loop did not run')
else
it  
end
[x,y] = meshgrid(1:N+1,1:N+1);
figure;
surf(x,y,reshape(sigma0,N+1,N+1))
   

%% Foward Solver 
function u = laplace1(N,sigma,b1,b2,b3,b4)
%laplace1(N) solves the 2D Laplace equation 
%        div.sigma(grad(u)) = 0 
%    on the unit square with N dx by N dy, with dx = dy = h. 
%    Gridpoints are labeled i = 1,...,N+1 and j = 1,...,N+1.
%    In u(i,j), i labels x and j labels y.
%


h = 1/N; % dx = dy = h
% k = (1:N+1)';
% x = (k-1)/N;
% y = (k-1)/N;
u = zeros(N+1,N+1);
u(2:N-1,1) = b1;
u(1,2:N-1) = b2;
u(N+1,2:N-1) = b3;
u(2:N-1, N+1) = b4;
sum = 0;
for i = 2:N
    for j = 2:N
        residual = -(sigma(i+1,j) + sigma(i-1,j) + sigma(i,j+1)...
            + sigma(i,j-1) + 4*sigma(i,j))*u(i,j)+(sigma(i+1,j)+sigma(i,j))*u(i+1,j)...
            +(sigma(i-1,j)+sigma(i,j))*u(i-1,j)+(sigma(i,j+1)+sigma(i,j))*u(i,j+1)...
            +(sigma(i,j-1)+sigma(i,j))*u(i,j-1); 
        
        sum = sum + abs(residual);
    end
end
normresidual = sum; % could divide by (N-1)^2 here and below in line 39
EPSILON = 10^-5*h^2*normresidual;
iter = 0;
while normresidual > EPSILON
    iter = iter + 1;
    sum = 0;
    for i = 2:N
        for j = 2:N
            residual = -(sigma(i+1,j) + sigma(i-1,j) + sigma(i,j+1)...
            + sigma(i,j-1) + 4*sigma(i,j))*u(i,j)+(sigma(i+1,j)+sigma(i,j))*u(i+1,j)...
            +(sigma(i-1,j)+sigma(i,j))*u(i-1,j)+(sigma(i,j+1)+sigma(i,j))*u(i,j+1)...
            +(sigma(i,j-1)+sigma(i,j))*u(i,j-1); 
        
            sum = sum + abs(residual);
            
            u(i,j) = u(i,j) + residual/(sigma(i+1,j) + sigma(i-1,j) + sigma(i,j+1)+ sigma(i,j-1) + 4*sigma(i,j));   
        end
    end
    normresidual = sum;
end
iterations = iter;


u = reshape(u(2:N,2:N),(N-1)*(N-1),1);
% u = u'; % transpose to plot

% figure
% surf(x,y,u);
% shading flat;
% xlabel('x','FontSize',24); 
% ylabel('y','FontSize',24); 
% zlabel('Potential','FontSize',24);
% 
% figure
% hh = pcolor(x,y,u);
% set(hh,'edgecolor','none','facecolor','interp');
% axis equal;
% axis off;
% set(gca,'fontsize',24);
% title('Potential');
% colormap jet;
% colorbar;        
end       
